AWSTemplateFormatVersion: "2010-09-09"
Description: "Complete Blogging Platform API Gateway Configuration"

Resources:
  BlogApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: BlogPlatformAPI
      Description: API for Blogging Platform
      FailOnWarnings: true

  # Users Resource
  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !GetAtt BlogApiGateway.RootResourceId
      PathPart: users

  UsersGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UsersResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  UsersPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UsersResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  UsersPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UsersResource
      HttpMethod: PUT
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  UsersDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UsersResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  UsersOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UsersResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Blog Posts Resource
  BlogPostsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !GetAtt BlogApiGateway.RootResourceId
      PathPart: blog-posts

  BlogPostsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref BlogPostsResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  BlogPostsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref BlogPostsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  BlogPostsPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref BlogPostsResource
      HttpMethod: PUT
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  BlogPostsDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref BlogPostsResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  BlogPostsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref BlogPostsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # User Posts Resource (nested under blog-posts)
  UserPostsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !Ref BlogPostsResource
      PathPart: user

  UserPostsUserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !Ref UserPostsResource
      PathPart: "{userId}"

  UserPostsUserIdGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UserPostsUserIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.userId: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  UserPostsUserIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UserPostsUserIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Post Comments Resource
  PostCommentsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !GetAtt BlogApiGateway.RootResourceId
      PathPart: post-comments

  PostCommentsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostCommentsResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostCommentsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostCommentsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostCommentsPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostCommentsResource
      HttpMethod: PUT
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostCommentsDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostCommentsResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostCommentsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostCommentsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Post Reactions Resource
  PostReactionsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !GetAtt BlogApiGateway.RootResourceId
      PathPart: post-reactions

  PostReactionsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostReactionsResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostReactionsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostReactionsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostReactionsPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostReactionsResource
      HttpMethod: PUT
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostReactionsDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostReactionsResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostReactionsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostReactionsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Post Shares Resource
  PostSharesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !GetAtt BlogApiGateway.RootResourceId
      PathPart: post-shares

  PostSharesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostSharesResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostSharesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostSharesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostSharesPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostSharesResource
      HttpMethod: PUT
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostSharesDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostSharesResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostSharesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostSharesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Categories Resource
  CategoriesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !GetAtt BlogApiGateway.RootResourceId
      PathPart: categories

  CategoriesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref CategoriesResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  CategoriesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref CategoriesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  CategoriesPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref CategoriesResource
      HttpMethod: PUT
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  CategoriesDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref CategoriesResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  CategoriesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref CategoriesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Tags Resource
  TagsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !GetAtt BlogApiGateway.RootResourceId
      PathPart: tags

  TagsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref TagsResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  TagsPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref TagsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  TagsPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref TagsResource
      HttpMethod: PUT
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  TagsDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref TagsResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  TagsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref TagsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Post Categories Resource
  PostCategoriesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !GetAtt BlogApiGateway.RootResourceId
      PathPart: post-categories

  PostCategoriesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostCategoriesResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostCategoriesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostCategoriesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostCategoriesPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostCategoriesResource
      HttpMethod: PUT
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostCategoriesDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostCategoriesResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.id: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  PostCategoriesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref PostCategoriesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # User Profiles Resource
  UserProfilesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !GetAtt BlogApiGateway.RootResourceId
      PathPart: user-profiles

  UserProfilesGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UserProfilesResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserProfileLambda.Arn}/invocations"

  UserProfilesPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UserProfilesResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserProfileLambda.Arn}/invocations"

  UserProfilesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UserProfilesResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  UserProfilesUserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !Ref UserProfilesResource
      PathPart: "{userId}"

  UserProfilesUserIdGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UserProfilesUserIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.userId: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserProfileLambda.Arn}/invocations"

  UserProfilesUserIdPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UserProfilesUserIdResource
      HttpMethod: PUT
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.userId: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserProfileLambda.Arn}/invocations"

  UserProfilesUserIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UserProfilesUserIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # User Bookmarks Resource (nested under user-profiles or root, depending on API design)
  # Assuming it's a top-level resource for simplicity based on the frontend call
  UserBookmarksResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !GetAtt BlogApiGateway.RootResourceId
      PathPart: bookmarks

  UserBookmarksUserIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !Ref UserBookmarksResource
      PathPart: user

  UserBookmarksUserIdActualResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !Ref UserBookmarksUserIdResource
      PathPart: "{userId}"

  UserBookmarksUserIdGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UserBookmarksUserIdActualResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.userId: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlogCRUDLambda.Arn}/invocations"

  UserBookmarksUserIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UserBookmarksUserIdActualResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  BecomeAuthorResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !Ref UserProfilesUserIdResource
      PathPart: become-author

  BecomeAuthorPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref BecomeAuthorResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserProfileLambda.Arn}/invocations"

  BecomeAuthorOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref BecomeAuthorResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  UploadProfilePictureResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BlogApiGateway
      ParentId: !GetAtt BlogApiGateway.RootResourceId
      PathPart: upload-profile-picture

  UploadProfilePicturePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UploadProfilePictureResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UserProfileLambda.Arn}/invocations"

  UploadProfilePictureOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BlogApiGateway
      ResourceId: !Ref UploadProfilePictureResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,POST,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Lambda Functions
  BlogCRUDLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BlogPlatformCRUDHandler # This will handle posts
      Handler: post.lambda_handler # Assuming post.py has lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          # The Python code would be here in the actual deployment
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
          BLOG_POSTS_TABLE: !Ref BlogPostsTable # Only posts table needed here
      Timeout: 30
      MemorySize: 512

  UserProfileLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UserProfileHandler # This will handle user and profile
      Handler: lambda.lambda_handler # Assuming lambda.py has lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          # The Python code for user profile handling will be here
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
          USER_PROFILES_TABLE: !Ref UserProfilesTable
          USERS_TABLE: !Ref UsersTable # Needed for user and profile functionality
          PROFILE_PICTURES_BUCKET: !Ref ProfilePicturesBucket
      Timeout: 30
      MemorySize: 512

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Users/index/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/BlogPosts"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/BlogPosts/index/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/PostComments"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/PostComments/index/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/PostReactions"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/PostReactions/index/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/PostShares"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/PostShares/index/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Categories"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Categories/index/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Tags"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Tags/index/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/PostCategories"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/PostCategories/index/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/UserProfiles"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/UserProfiles/index/*"
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::${ProfilePicturesBucket.Arn}/*" # Assuming a bucket for profile pictures
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Permissions for API Gateway to invoke Lambda
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BlogCRUDLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BlogApiGateway}/*/*/*"

  UserProfileLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UserProfileLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BlogApiGateway}/*/*/*"

  ProfilePicturesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "blogsphere-profile-pictures-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "*" # Restrict this to your frontend domain in production
            ExposedHeaders:
              - "ETag"
            MaxAge: 3000

  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Users
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: UsernameIndex
          KeySchema:
            - AttributeName: username
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  UserProfilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserProfiles
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  BlogPostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: BlogPosts
      AttributeDefinitions:
        - AttributeName: postId
          AttributeType: S
        - AttributeName: authorId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: postId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: AuthorIndex
          KeySchema:
            - AttributeName: authorId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # API Gateway Deployment
  BlogApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - UsersGetMethod
      - UsersPostMethod
      - UsersPutMethod
      - UsersDeleteMethod
      - UsersOptionsMethod
      - BlogPostsGetMethod
      - BlogPostsPostMethod
      - BlogPostsPutMethod
      - BlogPostsDeleteMethod
      - BlogPostsOptionsMethod
      - UserPostsUserIdGetMethod
      - UserPostsUserIdOptionsMethod
      - UserBookmarksUserIdGetMethod
      - UserBookmarksUserIdOptionsMethod
      - PostCommentsGetMethod
      - PostCommentsPostMethod
      - PostCommentsPutMethod
      - PostCommentsDeleteMethod
      - PostCommentsOptionsMethod
      - PostReactionsGetMethod
      - PostReactionsPostMethod
      - PostReactionsPutMethod
      - PostReactionsDeleteMethod
      - PostReactionsOptionsMethod
      - PostSharesGetMethod
      - PostSharesPostMethod
      - PostSharesPutMethod
      - PostSharesDeleteMethod
      - PostSharesOptionsMethod
      - CategoriesGetMethod
      - CategoriesPostMethod
      - CategoriesPutMethod
      - CategoriesDeleteMethod
      - CategoriesOptionsMethod
      - TagsGetMethod
      - TagsPostMethod
      - TagsPutMethod
      - TagsDeleteMethod
      - TagsOptionsMethod
      - PostCategoriesGetMethod
      - PostCategoriesPostMethod
      - PostCategoriesPutMethod
      - PostCategoriesDeleteMethod
      - PostCategoriesOptionsMethod
      - UserProfilesGetMethod
      - UserProfilesPostMethod
      - UserProfilesOptionsMethod
      - UserProfilesUserIdGetMethod
      - UserProfilesUserIdPutMethod
      - UserProfilesUserIdOptionsMethod
      - BecomeAuthorPostMethod
      - BecomeAuthorOptionsMethod
      - UploadProfilePicturePostMethod
      - UploadProfilePictureOptionsMethod
    Properties:
      RestApiId: !Ref BlogApiGateway
      StageName: prod

Outputs:
  ApiGatewayUrl:
    Description: "URL of the API Gateway"
    Value: !Sub "https://${BlogApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"
  LambdaFunctionArn:
    Description: "ARN of the Lambda function"
    Value: !GetAtt BlogCRUDLambda.Arn
  UserProfileLambdaArn:
    Description: "ARN of the UserProfile Lambda function"
    Value: !GetAtt UserProfileLambda.Arn
  ProfilePicturesBucketName:
    Description: "Name of the S3 bucket for profile pictures"
    Value: !Ref ProfilePicturesBucket
